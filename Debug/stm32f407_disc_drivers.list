
stm32f407_disc_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800069c  0800069c  0001069c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006a8  080006a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006a8  080006a8  000106a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080006b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080006bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080006bc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001150  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003a0  00000000  00000000  0002118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00021530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000090  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002086  00000000  00000000  00021678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d21  00000000  00000000  000236fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009169  00000000  00000000  0002441f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002d588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000214  00000000  00000000  0002d5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000684 	.word	0x08000684

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000010 	.word	0x20000010
 80001e4:	08000684 	.word	0x08000684

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInit>:
uint32_t *gpiob=(uint32_t *)(0x40020400);
uint32_t *RCC_AHB1ENR = (uint32_t *)(0x40023800+0x30);
uint32_t *IDR = (uint32_t *)(0x40020000+ 0x10);


void SPI2_GPIOInit(){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
		 * PB12 -NSS
		 * ALT FUNCTION MODE =5
		 */
//turning clock of gpiob

	 *RCC_AHB1ENR |= (1<<3);
 80001fc:	4b2f      	ldr	r3, [pc, #188]	; (80002bc <SPI2_GPIOInit+0xc4>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <SPI2_GPIOInit+0xc4>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f042 0208 	orr.w	r2, r2, #8
 800020a:	601a      	str	r2, [r3, #0]

	//setting all the above pins as alternate functionality mode
	*gpiob|=(3<<28);
 800020c:	4b2c      	ldr	r3, [pc, #176]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	681a      	ldr	r2, [r3, #0]
 8000212:	4b2b      	ldr	r3, [pc, #172]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800021a:	601a      	str	r2, [r3, #0]
	*gpiob|=(3<<30);
 800021c:	4b28      	ldr	r3, [pc, #160]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	4b27      	ldr	r3, [pc, #156]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800022a:	601a      	str	r2, [r3, #0]
	*gpiob|=(3<<26);
 800022c:	4b24      	ldr	r3, [pc, #144]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f042 6240 	orr.w	r2, r2, #201326592	; 0xc000000
 800023a:	601a      	str	r2, [r3, #0]
	*gpiob|=(3<<24);
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800024a:	601a      	str	r2, [r3, #0]


	//setting the gpiob as push pull config
	*(gpiob+0x04)|=(3<<24);
 800024c:	4b1c      	ldr	r3, [pc, #112]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3310      	adds	r3, #16
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	3310      	adds	r3, #16
 800025a:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800025e:	601a      	str	r2, [r3, #0]

	//setting alternate functionality high register
	*(gpiob+0x24) |= (5<<16);
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	3390      	adds	r3, #144	; 0x90
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	3390      	adds	r3, #144	; 0x90
 800026e:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8000272:	601a      	str	r2, [r3, #0]
	*(gpiob+0x24) |= (5<<20);
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	3390      	adds	r3, #144	; 0x90
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3390      	adds	r3, #144	; 0x90
 8000282:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000286:	601a      	str	r2, [r3, #0]
	*(gpiob+0x24) |= (5<<24);
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3390      	adds	r3, #144	; 0x90
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	3390      	adds	r3, #144	; 0x90
 8000296:	f042 62a0 	orr.w	r2, r2, #83886080	; 0x5000000
 800029a:	601a      	str	r2, [r3, #0]
	*(gpiob+0x24) |= (5<<28);
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3390      	adds	r3, #144	; 0x90
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SPI2_GPIOInit+0xc8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3390      	adds	r3, #144	; 0x90
 80002aa:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
 80002ae:	601a      	str	r2, [r3, #0]




}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	20000004 	.word	0x20000004
 80002c0:	20000000 	.word	0x20000000

080002c4 <SPI2_INIT>:
void SPI2_INIT(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx=SPI2;
 80002ca:	4b0c      	ldr	r3, [pc, #48]	; (80002fc <SPI2_INIT+0x38>)
 80002cc:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig=SPI_BUS_CONFIG_FD;
 80002ce:	2301      	movs	r3, #1
 80002d0:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_CPHA=SPI_CPHA_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL=SPI_CPOL_LOW;
 80002d6:	2300      	movs	r3, #0
 80002d8:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_DFF=SPI_DFF_8BITS;
 80002da:	2300      	movs	r3, #0
 80002dc:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_SSM=SPI_SSM_DI;
 80002de:	2300      	movs	r3, #0
 80002e0:	73bb      	strb	r3, [r7, #14]
	SPI2handle.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 80002e2:	2301      	movs	r3, #1
 80002e4:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed=SPI_SCLK_SPEED_DIV2;
 80002e6:	2300      	movs	r3, #0
 80002e8:	733b      	strb	r3, [r7, #12]

	SPI_Init(&SPI2handle);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f000 f8c5 	bl	800047c <SPI_Init>



}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40003800 	.word	0x40003800

08000300 <main>:
int main(){
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
	 * PB15-SPI2 MOSI
	 * PB13 - SCLK
	 * PB12 -NSS
	 * ALT FUNCTION MODE =5
	 */
	char user_data[]="hello world";
 8000306:	4a27      	ldr	r2, [pc, #156]	; (80003a4 <main+0xa4>)
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	ca07      	ldmia	r2, {r0, r1, r2}
 800030e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	SPI2_GPIOInit();
 8000312:	f7ff ff71 	bl	80001f8 <SPI2_GPIOInit>
	SPI2_INIT();
 8000316:	f7ff ffd5 	bl	80002c4 <SPI2_INIT>



	//button settings
	*RCC_AHB1ENR |= (1<<0);
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <main+0xa8>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <main+0xa8>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f042 0201 	orr.w	r2, r2, #1
 8000328:	601a      	str	r2, [r3, #0]

		 uint32_t *MODER_GPIOA = (uint32_t *)(0x40020000);
 800032a:	4b20      	ldr	r3, [pc, #128]	; (80003ac <main+0xac>)
 800032c:	617b      	str	r3, [r7, #20]
		 *MODER_GPIOA|=(0<<0);
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	601a      	str	r2, [r3, #0]

	//SPI2 SSOE ENABLE
		 SPI_SSOEConfig(SPI2, ENABLE);
 8000336:	2101      	movs	r1, #1
 8000338:	481d      	ldr	r0, [pc, #116]	; (80003b0 <main+0xb0>)
 800033a:	f000 f94e 	bl	80005da <SPI_SSOEConfig>

	while(1){


	while(!(*IDR&0x00000001));
 800033e:	bf00      	nop
 8000340:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <main+0xb4>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d0f8      	beq.n	8000340 <main+0x40>

	//enabling spi peripheral which is disabled by default
	//all settings must be done while the SPI peripheral is enabled
	SPI_PeripheralControl(SPI2, ENABLE);
 800034e:	2101      	movs	r1, #1
 8000350:	4817      	ldr	r0, [pc, #92]	; (80003b0 <main+0xb0>)
 8000352:	f000 f926 	bl	80005a2 <SPI_PeripheralControl>

	//FIRST SEND LENGTH INFORMATION
	uint8_t len = strlen(user_data);
 8000356:	f107 0308 	add.w	r3, r7, #8
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff44 	bl	80001e8 <strlen>
 8000360:	4603      	mov	r3, r0
 8000362:	b2db      	uxtb	r3, r3
 8000364:	71fb      	strb	r3, [r7, #7]
	SPI_SendData(SPI2,&len,1);
 8000366:	1dfb      	adds	r3, r7, #7
 8000368:	2201      	movs	r2, #1
 800036a:	4619      	mov	r1, r3
 800036c:	4810      	ldr	r0, [pc, #64]	; (80003b0 <main+0xb0>)
 800036e:	f000 f8e0 	bl	8000532 <SPI_SendData>

	//SENDING DATA
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000372:	f107 0308 	add.w	r3, r7, #8
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff36 	bl	80001e8 <strlen>
 800037c:	4602      	mov	r2, r0
 800037e:	f107 0308 	add.w	r3, r7, #8
 8000382:	4619      	mov	r1, r3
 8000384:	480a      	ldr	r0, [pc, #40]	; (80003b0 <main+0xb0>)
 8000386:	f000 f8d4 	bl	8000532 <SPI_SendData>

		//checking if busy flag is set or cleared to disable spi communication
		while(SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG));
 800038a:	bf00      	nop
 800038c:	2180      	movs	r1, #128	; 0x80
 800038e:	4808      	ldr	r0, [pc, #32]	; (80003b0 <main+0xb0>)
 8000390:	f000 f93f 	bl	8000612 <SPI_GetFlagStatus>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f8      	bne.n	800038c <main+0x8c>



	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 800039a:	2100      	movs	r1, #0
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <main+0xb0>)
 800039e:	f000 f900 	bl	80005a2 <SPI_PeripheralControl>
	while(1){
 80003a2:	e7cc      	b.n	800033e <main+0x3e>
 80003a4:	0800069c 	.word	0x0800069c
 80003a8:	20000004 	.word	0x20000004
 80003ac:	40020000 	.word	0x40020000
 80003b0:	40003800 	.word	0x40003800
 80003b4:	20000008 	.word	0x20000008

080003b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b8:	480d      	ldr	r0, [pc, #52]	; (80003f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80003bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c0:	480c      	ldr	r0, [pc, #48]	; (80003f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003c2:	490d      	ldr	r1, [pc, #52]	; (80003f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003c4:	4a0d      	ldr	r2, [pc, #52]	; (80003fc <LoopForever+0xe>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c8:	e002      	b.n	80003d0 <LoopCopyDataInit>

080003ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ce:	3304      	adds	r3, #4

080003d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d4:	d3f9      	bcc.n	80003ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d6:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d8:	4c0a      	ldr	r4, [pc, #40]	; (8000404 <LoopForever+0x16>)
  movs r3, #0
 80003da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003dc:	e001      	b.n	80003e2 <LoopFillZerobss>

080003de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e0:	3204      	adds	r2, #4

080003e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e4:	d3fb      	bcc.n	80003de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003e6:	f000 f929 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ea:	f7ff ff89 	bl	8000300 <main>

080003ee <LoopForever>:

LoopForever:
    b LoopForever
 80003ee:	e7fe      	b.n	80003ee <LoopForever>
  ldr   r0, =_estack
 80003f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003fc:	080006b0 	.word	0x080006b0
  ldr r2, =_sbss
 8000400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000404:	20000028 	.word	0x20000028

08000408 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <SPI_PeriClockControl>:
#include "stm32f407_spi.h"

/*
 * Peripheral Clock setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi){
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	460b      	mov	r3, r1
 8000416:	70fb      	strb	r3, [r7, #3]
	if(EnorDi==ENABLE){
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d11f      	bne.n	800045e <SPI_PeriClockControl+0x52>
			if(pSPIx==SPI1)SPI1_PCLK_EN();
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <SPI_PeriClockControl+0x60>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <SPI_PeriClockControl+0x28>
 8000426:	4b12      	ldr	r3, [pc, #72]	; (8000470 <SPI_PeriClockControl+0x64>)
 8000428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800042a:	4a11      	ldr	r2, [pc, #68]	; (8000470 <SPI_PeriClockControl+0x64>)
 800042c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000430:	6453      	str	r3, [r2, #68]	; 0x44
			/*if(pSPIx==SPI1)SPI1_PCLK_DI();
			else if(pSPIx==SPI2)SPI2_PCLK_DI();
			else if(pSPIx==SPI3)SPI3_PCLK_DI();
*/
		}
}
 8000432:	e014      	b.n	800045e <SPI_PeriClockControl+0x52>
			else if(pSPIx==SPI2)SPI2_PCLK_EN();
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a0f      	ldr	r2, [pc, #60]	; (8000474 <SPI_PeriClockControl+0x68>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <SPI_PeriClockControl+0x3e>
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <SPI_PeriClockControl+0x64>)
 800043e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000440:	4a0b      	ldr	r2, [pc, #44]	; (8000470 <SPI_PeriClockControl+0x64>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000448:	e009      	b.n	800045e <SPI_PeriClockControl+0x52>
			else if(pSPIx==SPI3)SPI3_PCLK_EN();
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <SPI_PeriClockControl+0x6c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d105      	bne.n	800045e <SPI_PeriClockControl+0x52>
 8000452:	4b07      	ldr	r3, [pc, #28]	; (8000470 <SPI_PeriClockControl+0x64>)
 8000454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000456:	4a06      	ldr	r2, [pc, #24]	; (8000470 <SPI_PeriClockControl+0x64>)
 8000458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800045c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40013000 	.word	0x40013000
 8000470:	40023800 	.word	0x40023800
 8000474:	40003800 	.word	0x40003800
 8000478:	40003c00 	.word	0x40003c00

0800047c <SPI_Init>:

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2101      	movs	r1, #1
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffbe 	bl	800040c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	791b      	ldrb	r3, [r3, #4]
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	461a      	mov	r2, r3
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	4313      	orrs	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d104      	bne.n	80004b4 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	e014      	b.n	80004de <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b02      	cmp	r3, #2
 80004ba:	d104      	bne.n	80004c6 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	e00b      	b.n	80004de <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	795b      	ldrb	r3, [r3, #5]
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d107      	bne.n	80004de <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80004d4:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004dc:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7a1b      	ldrb	r3, [r3, #8]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	461a      	mov	r2, r3
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	799b      	ldrb	r3, [r3, #6]
 80004f0:	02db      	lsls	r3, r3, #11
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	7a5b      	ldrb	r3, [r3, #9]
 80004fe:	005b      	lsls	r3, r3, #1
 8000500:	461a      	mov	r2, r3
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	4313      	orrs	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	79db      	ldrb	r3, [r3, #7]
 800050c:	461a      	mov	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4313      	orrs	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	7a9b      	ldrb	r3, [r3, #10]
 8000518:	025b      	lsls	r3, r3, #9
 800051a:	461a      	mov	r2, r3
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4313      	orrs	r3, r2
 8000520:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	601a      	str	r2, [r3, #0]

}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <SPI_SendData>:
/*
 * Data Send and Receive
 */

//blocking call
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len){
 8000532:	b480      	push	{r7}
 8000534:	b085      	sub	sp, #20
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
	while (Len >0){
 800053e:	e026      	b.n	800058e <SPI_SendData+0x5c>
		//wait until the TXE bit is set indicating the buffer is full
		while(pSPIx->SR & (1<<1));
 8000540:	bf00      	nop
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	689b      	ldr	r3, [r3, #8]
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f9      	bne.n	8000542 <SPI_SendData+0x10>
		//check the data frame format ie 8 or 16 bit
		if(pSPIx->CR1 & (1<<SPI_CR1_DFF)){
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000556:	2b00      	cmp	r3, #0
 8000558:	d00e      	beq.n	8000578 <SPI_SendData+0x46>
			//16 BIT FORMAT
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	60da      	str	r2, [r3, #12]
			Len--;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	3b01      	subs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
			Len--; //reducing length by 16 bits
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3b01      	subs	r3, #1
 800056e:	607b      	str	r3, [r7, #4]
			//now after reading data we must point to next address to fetch data
			(uint16_t)pTxBuffer++;
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	3301      	adds	r3, #1
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	e00a      	b.n	800058e <SPI_SendData+0x5c>
		}
		else{
			//8 bit data format
			pSPIx->DR =*pTxBuffer;
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	461a      	mov	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	60da      	str	r2, [r3, #12]
			Len--;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3b01      	subs	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000588:	68bb      	ldr	r3, [r7, #8]
 800058a:	3301      	adds	r3, #1
 800058c:	60bb      	str	r3, [r7, #8]
	while (Len >0){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1d5      	bne.n	8000540 <SPI_SendData+0xe>
		}
	}
}
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <SPI_PeripheralControl>:
/*
 * other apis
 */

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	460b      	mov	r3, r1
 80005ac:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80005ae:	78fb      	ldrb	r3, [r7, #3]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d106      	bne.n	80005c2 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80005c0:	e005      	b.n	80005ce <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	601a      	str	r2, [r3, #0]
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	460b      	mov	r3, r1
 80005e4:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d106      	bne.n	80005fa <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f043 0204 	orr.w	r2, r3, #4
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 80005f8:	e005      	b.n	8000606 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	f023 0204 	bic.w	r2, r3, #4
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	605a      	str	r2, [r3, #4]
}
 8000606:	bf00      	nop
 8000608:	370c      	adds	r7, #12
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr

08000612 <SPI_GetFlagStatus>:
 *
 * @Note              -

*/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 8000612:	b480      	push	{r7}
 8000614:	b083      	sub	sp, #12
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
 800061a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	4013      	ands	r3, r2
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SPI_GetFlagStatus+0x1a>
	{
		return 1;
 8000628:	2301      	movs	r3, #1
 800062a:	e000      	b.n	800062e <SPI_GetFlagStatus+0x1c>
	}
	return 0;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
	...

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4d0d      	ldr	r5, [pc, #52]	; (8000674 <__libc_init_array+0x38>)
 8000640:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	2600      	movs	r6, #0
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	4d0b      	ldr	r5, [pc, #44]	; (800067c <__libc_init_array+0x40>)
 800064e:	4c0c      	ldr	r4, [pc, #48]	; (8000680 <__libc_init_array+0x44>)
 8000650:	f000 f818 	bl	8000684 <_init>
 8000654:	1b64      	subs	r4, r4, r5
 8000656:	10a4      	asrs	r4, r4, #2
 8000658:	2600      	movs	r6, #0
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f855 3b04 	ldr.w	r3, [r5], #4
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	f855 3b04 	ldr.w	r3, [r5], #4
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	080006a8 	.word	0x080006a8
 8000678:	080006a8 	.word	0x080006a8
 800067c:	080006a8 	.word	0x080006a8
 8000680:	080006ac 	.word	0x080006ac

08000684 <_init>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	bf00      	nop
 8000688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800068a:	bc08      	pop	{r3}
 800068c:	469e      	mov	lr, r3
 800068e:	4770      	bx	lr

08000690 <_fini>:
 8000690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000692:	bf00      	nop
 8000694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000696:	bc08      	pop	{r3}
 8000698:	469e      	mov	lr, r3
 800069a:	4770      	bx	lr
